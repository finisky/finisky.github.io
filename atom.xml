<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Finisky Garden</title>
  <icon>https://finisky.github.io/icon.png</icon>
  <subtitle>NLP, 软件工程, 产品设计</subtitle>
  <link href="https://finisky.github.io/atom.xml" rel="self"/>
  
  <link href="https://finisky.github.io/"/>
  <updated>2024-11-24T05:07:58.000Z</updated>
  <id>https://finisky.github.io/</id>
  
  <author>
    <name>finisky</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Building a Transaction System with MongoDB</title>
    <link href="https://finisky.github.io/en/building-a-transaction-system-with-mongodb/"/>
    <id>https://finisky.github.io/en/building-a-transaction-system-with-mongodb/</id>
    <published>2024-11-24T04:58:00.000Z</published>
    <updated>2024-11-24T05:07:58.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;Transaction systems are at the heart of modern commerce and financial
activities, spanning a wide range of scenarios from e-commerce order
processing to real-time settlements in financial institutions. Such
systems demand high concurrency handling, real-time data storage, and
efficient retrieval capabilities, all while balancing data consistency
and performance. As transaction data continues to grow in scale and
complexity, traditional transaction system architectures often struggle
to meet these challenges due to rigid table structures and limited
horizontal scalability.&lt;/p&gt;
&lt;p&gt;MongoDB, as a distributed document-oriented database, provides a
modern solution for building complex and efficient transaction systems.
With its flexible schema design, high throughput capabilities, and
built-in transaction support, MongoDB addresses diverse business needs
effectively.&lt;/p&gt;</summary>
    
    
    
    <category term="MongoDB" scheme="https://finisky.github.io/categories/MongoDB/"/>
    
    
    <category term="C#" scheme="https://finisky.github.io/tags/C/"/>
    
    <category term="MongoDB" scheme="https://finisky.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>用MongoDB构建交易系统</title>
    <link href="https://finisky.github.io/building-a-transaction-system-with-mongodb/"/>
    <id>https://finisky.github.io/building-a-transaction-system-with-mongodb/</id>
    <published>2024-11-24T04:31:03.000Z</published>
    <updated>2024-11-24T05:07:58.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;交易系统是现代商业和金融活动的核心，涵盖从电子商务订单处理到金融机构的实时清算等多种场景。这类系统通常需要高并发处理能力、实时数据存储和高效检索功能，同时需要在数据一致性与性能之间找到平衡。随着交易数据的规模和复杂性不断增长，传统交易系统架构在应对这些挑战时，往往因固定的表结构和横向扩展能力的不足而受限。&lt;/p&gt;
&lt;p&gt;MongoDB
作为一款分布式文档型数据库，以其灵活的架构、高吞吐能力和内置的事务支持，为构建复杂、高效的交易系统提供了一种现代化的解决方案，能够满足多样化的业务需求。&lt;/p&gt;</summary>
    
    
    
    <category term="MongoDB" scheme="https://finisky.github.io/categories/MongoDB/"/>
    
    
    <category term="C#" scheme="https://finisky.github.io/tags/C/"/>
    
    <category term="MongoDB" scheme="https://finisky.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Certbot: Automating Nginx SSL Renewal</title>
    <link href="https://finisky.github.io/en/certbot-automating-nginx-ssl-renewal/"/>
    <id>https://finisky.github.io/en/certbot-automating-nginx-ssl-renewal/</id>
    <published>2024-11-17T05:03:35.000Z</published>
    <updated>2024-11-17T05:09:13.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;Received a certificate renewal notification from Tencent Cloud, but
when applying for a new certificate, I found out that Tencent Cloud no
longer offers free one-year certificates:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Starting from April 25, 2024, the validity period of new free
certificates issued by Tencent Cloud will be adjusted to 90 days.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since I’ve always updated certificates manually, doing it every three
months feels quite tedious. So, I decided to explore Certbot from Let&#39;s
Encrypt. My only concern was how to prove ownership of a subdomain.
After trying it out, I realized this wasn’t an issue at all, as Certbot
only issues certificates and doesn’t pose any threat to the website
itself.&lt;/p&gt;
&lt;p&gt;Here are the configuration steps for Certbot. In fact, it’s very
simple and only requires running a few commands.&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://finisky.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://finisky.github.io/tags/Linux/"/>
    
    <category term="Ubuntu" scheme="https://finisky.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Cerbot自动化管理Nginx网站证书</title>
    <link href="https://finisky.github.io/certbot-automating-nginx-ssl-renewal/"/>
    <id>https://finisky.github.io/certbot-automating-nginx-ssl-renewal/</id>
    <published>2024-11-17T04:56:40.000Z</published>
    <updated>2024-11-17T05:09:13.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;收到腾讯云的证书续期通知，结果在申请新证书时发现，腾讯云不再支持一年的免费证书：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2024年4月25日起，腾讯云新签发的免费证书有效期调整为 90 天&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;考虑到一直是手动更新证书，如果三个月手动操作一次还是挺费劲的。于是研究Let&#39;s
Encrypt的certbot，唯一的顾虑是如何证明自己对二级域名的所有权问题。实践之后发现此问题并不存在，因为certbot仅是签发一个证书而已，并不存在对网站本身的威胁。&lt;/p&gt;
&lt;p&gt;下面是certbot的配置步骤，其实仅需要执行几个命令，非常简单。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://finisky.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://finisky.github.io/tags/Linux/"/>
    
    <category term="Ubuntu" scheme="https://finisky.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>十一伦敦游记</title>
    <link href="https://finisky.github.io/london-travel/"/>
    <id>https://finisky.github.io/london-travel/</id>
    <published>2024-11-09T10:45:31.000Z</published>
    <updated>2024-11-10T04:37:27.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;十一去了趟伦敦，很喜欢这座拥有悠久历史和丰富文化的城市，古典和现代的结合给人留下了非常深刻的印象。限于时间，只玩了几处最具代表性的地标：大英博物馆、西敏寺、牛津大学、国家美术馆和海德公园。&lt;/p&gt;
&lt;p&gt;去之前在小红书上做了些功课，主要是两点：提前办无接触信用卡(contactless
card)和治安不好。其他就是常规操作，出发前两天买旅行险，提前在淘宝上买电话卡(用的giffgaff，信号还可以)。&lt;/p&gt;
&lt;p&gt;旅行的体验：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无接触卡非常必要，一分钱现金也没花，全带回来了。&lt;/li&gt;
&lt;li&gt;总体治安尚可，肯定不像小红书上说得那么夸张，当地朋友告诉我们治安非常好。同行的朋友确实遭遇了抢手机，虽然没抢走，但也受了点小伤。&lt;/li&gt;
&lt;li&gt;吃得还不错，不需要带泡面，当地的英式早餐、英国菜、印度菜和意大利菜都挺好吃，不是传说中的“美食荒漠”。&lt;/li&gt;
&lt;li&gt;酒店比较贵。&lt;/li&gt;
&lt;li&gt;购物不太行，不像美国日本那么好买，许多品牌比国内贵。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特别要提的是天气，十月已经不再是伦敦的旅游旺季，温度大概在10度左右，偏湿冷。当地朋友特意提示要穿waterproof，也就是冲锋衣。实际体验之后明白了原因，这里的雨可谓是霪雨霏霏，下得不大，但说下就下，而且可能伴有大风，穿雨衣忒费劲，打伞又举不住，而且大风带着小雨一样会把衣服打湿。&lt;/p&gt;</summary>
    
    
    
    <category term="Life" scheme="https://finisky.github.io/categories/Life/"/>
    
    
  </entry>
  
  <entry>
    <title>Building Large-Scale Social Network Graphs with MongoDB</title>
    <link href="https://finisky.github.io/en/building-large-scale-social-network-graphs-with-mongodb/"/>
    <id>https://finisky.github.io/en/building-large-scale-social-network-graphs-with-mongodb/</id>
    <published>2024-11-04T16:59:12.000Z</published>
    <updated>2024-11-14T02:01:24.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;Nowadays, many popular apps incorporate social network features, such
as Twitter, WhatsApp, and Facebook. These platforms need to scale to
accommodate billions of users (graph nodes), which is no small feat.
Building and maintaining a scalable social network infrastructure
requires careful planning and strategic data modeling. In fact,
specialized social networking applications like Facebook have dedicated
teams focusing solely on optimizing their performance to the highest
level. However, for smaller apps or startup projects looking to add
social networking capabilities, creating a full team to handle such
architecture is often impractical and unnecessary.&lt;/p&gt;
&lt;p&gt;So, is it possible to build a high-performance, scalable social
network using the right data modeling and storage solutions? The answer
is yes. Early versions of Facebook used MySQL as the underlying storage
to construct their social network, but today we have more advanced and
efficient storage options available: MongoDB.&lt;/p&gt;</summary>
    
    
    
    <category term="MongoDB" scheme="https://finisky.github.io/categories/MongoDB/"/>
    
    
    <category term="C#" scheme="https://finisky.github.io/tags/C/"/>
    
    <category term="MongoDB" scheme="https://finisky.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>用MongoDB构建大规模社交网络关系链</title>
    <link href="https://finisky.github.io/building-large-scale-social-network-graphs-with-mongodb/"/>
    <id>https://finisky.github.io/building-large-scale-social-network-graphs-with-mongodb/</id>
    <published>2024-11-04T13:59:48.000Z</published>
    <updated>2024-11-14T02:01:24.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;如今许多App都涉及社交网络，如 Twitter、WhatsApp 和
Facebook。这些平台必须扩展以处理数十亿用户（图节点），这并非易事。构建和维护一个可扩展的社交网络基础设施需要仔细的规划和战略性的数据建模。实际上，像Facebook这样专业的社交网络应用有专门的团队来做这块内容，对其性能进行极致的优化。但对于许多希望加入社交网络功能的小型App，如一个创业公司项目，建立一个团队来做这样的架构显然是不现实也没有必要的。&lt;/p&gt;
&lt;p&gt;那么，利用合适的数据建模和存储能否构建一个高性能易扩展的社交网络？答案是肯定的。早期的Facebook使用mysql作为底层存储来构建社交网络，但今天我们可以有更好更高效的存储选择：MongoDB。&lt;/p&gt;</summary>
    
    
    
    <category term="MongoDB" scheme="https://finisky.github.io/categories/MongoDB/"/>
    
    
    <category term="C#" scheme="https://finisky.github.io/tags/C/"/>
    
    <category term="MongoDB" scheme="https://finisky.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>TypeError: Argument has incorrect type (expected numpy.ndarray, got DataFrame) 解决方案</title>
    <link href="https://finisky.github.io/argument-incorrect-type-expected-ndarray/"/>
    <id>https://finisky.github.io/argument-incorrect-type-expected-ndarray/</id>
    <published>2024-11-02T04:20:29.000Z</published>
    <updated>2024-11-02T04:27:22.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;在conda环境中升级软件包后，talib无法接受DataFrame作为输入，错误信息如下所示：&lt;code&gt;TypeError: Argument &#39;xxx&#39; has incorrect type (expected numpy.ndarray, got DataFrame)&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;Traceback (most recent call last):
  File &amp;quot;&amp;#x2F;data&amp;#x2F;1.py&amp;quot;, line 7, in &amp;lt;module&amp;gt;
    df[&amp;#39;SMA_5&amp;#39;] &amp;#x3D; ta.SMA(df[&amp;#39;Close&amp;#39;], timeperiod&amp;#x3D;5)
  File &amp;quot;&amp;#x2F;data&amp;#x2F;miniconda3&amp;#x2F;envs&amp;#x2F;a&amp;#x2F;lib&amp;#x2F;python3.10&amp;#x2F;site-packages&amp;#x2F;talib&amp;#x2F;__init__.py&amp;quot;, line 64, in wrapper
    result &amp;#x3D; func(*_args, **_kwds)
TypeError: Argument &amp;#39;real&amp;#39; has incorrect type (expected numpy.ndarray, got DataFrame)&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;大多数网络搜索结果都具有误导性，比如将df转换为np数组。由于在更新软件包之前代码能够正常运行，因此问题应为软件包不兼容的问题。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://finisky.github.io/categories/Linux/"/>
    
    
    <category term="python" scheme="https://finisky.github.io/tags/python/"/>
    
    <category term="Linux" scheme="https://finisky.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>TypeError: Argument has incorrect type (expected numpy.ndarray, got DataFrame) Solution</title>
    <link href="https://finisky.github.io/en/argument-incorrect-type-expected-ndarray/"/>
    <id>https://finisky.github.io/en/argument-incorrect-type-expected-ndarray/</id>
    <published>2024-11-02T04:06:56.000Z</published>
    <updated>2024-11-02T04:27:22.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;After upgrading packages in a conda env, talib cannot accept
dataframe as input, the error message looks like
&lt;code&gt;TypeError: Argument &#39;xxx&#39; has incorrect type (expected numpy.ndarray, got DataFrame)&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;Traceback (most recent call last):
  File &amp;quot;&amp;#x2F;data&amp;#x2F;1.py&amp;quot;, line 7, in &amp;lt;module&amp;gt;
    df[&amp;#39;SMA_5&amp;#39;] &amp;#x3D; ta.SMA(df[&amp;#39;Close&amp;#39;], timeperiod&amp;#x3D;5)
  File &amp;quot;&amp;#x2F;data&amp;#x2F;miniconda3&amp;#x2F;envs&amp;#x2F;a&amp;#x2F;lib&amp;#x2F;python3.10&amp;#x2F;site-packages&amp;#x2F;talib&amp;#x2F;__init__.py&amp;quot;, line 64, in wrapper
    result &amp;#x3D; func(*_args, **_kwds)
TypeError: Argument &amp;#39;real&amp;#39; has incorrect type (expected numpy.ndarray, got DataFrame)&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Most of the web search results are misleading, like changing the df
into np array. Since the code works before updating packages, the
problem should be package incompatibility issue.&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://finisky.github.io/categories/Linux/"/>
    
    
    <category term="python" scheme="https://finisky.github.io/tags/python/"/>
    
    <category term="Linux" scheme="https://finisky.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Windows 11 drive D usable but not visible in File Explorer</title>
    <link href="https://finisky.github.io/en/drive-d-usable-but-not-visible-in-file-explorer/"/>
    <id>https://finisky.github.io/en/drive-d-usable-but-not-visible-in-file-explorer/</id>
    <published>2024-10-12T16:40:35.000Z</published>
    <updated>2024-10-12T16:42:39.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;Today, I encountered a strange issue in Windows 11 where the D drive
was visible in the Disk Management tool but not in File Explorer. I
searched online for many solutions, such as updating drivers in Device
Manager, disabling and re-enabling the device, using
&lt;code&gt;diskpart&lt;/code&gt; to delete and recreate the partition, changing the
volume label, changing the drive letter, etc., but none worked.&lt;/p&gt;
&lt;h2 id=&quot;problem-description&quot;&gt;Problem Description&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A new D drive, visible in &lt;code&gt;diskmgmt.msc&lt;/code&gt; Disk Management,
everything seemed normal. It could even be accessed in File Explorer
(though the drive wasn’t displayed in the left sidebar).&lt;/li&gt;
&lt;li&gt;The D drive could be used normally, such as via the command
line.&lt;/li&gt;
&lt;li&gt;Changing the drive letter to “E” or another letter made it visible
in File Explorer, but switching it back to “D” caused it to disappear
again.&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Misc" scheme="https://finisky.github.io/categories/Misc/"/>
    
    
  </entry>
  
  <entry>
    <title>Win11 D盘可用但在文件浏览器中不可见</title>
    <link href="https://finisky.github.io/drive-d-usable-but-not-visible-in-file-explorer/"/>
    <id>https://finisky.github.io/drive-d-usable-but-not-visible-in-file-explorer/</id>
    <published>2024-10-12T16:13:33.000Z</published>
    <updated>2024-10-12T16:42:39.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;今天遇到Win11中 D
盘在磁盘管理工具中显示可用，但在文件管理器中却不可见的诡异情况。网上搜了许多方案，如在设备管理器中更新驱动，禁用再启用设备，用&lt;code&gt;diskpart&lt;/code&gt;重新删除新建分区，改卷标改盘符等等都不好使。&lt;/p&gt;
&lt;h2 id=&quot;问题描述&quot;&gt;问题描述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新建D盘，在&lt;code&gt;diskmgmt.msc&lt;/code&gt;磁盘管理器中可见，一切正常。甚至能打开文件浏览器（只是左栏不显示磁盘）&lt;/li&gt;
&lt;li&gt;D盘可正常使用，如在命令行中使用&lt;/li&gt;
&lt;li&gt;修改盘符为“E”或其他盘符，文件浏览器中就可见了，但改回“D”又会消失&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Misc" scheme="https://finisky.github.io/categories/Misc/"/>
    
    
  </entry>
  
  <entry>
    <title>Use az cli to Query Multiple Fields of Resource Information</title>
    <link href="https://finisky.github.io/en/use-az-cli-to-query-multiple-fields/"/>
    <id>https://finisky.github.io/en/use-az-cli-to-query-multiple-fields/</id>
    <published>2024-09-11T13:53:33.000Z</published>
    <updated>2024-09-11T13:53:53.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;Use &lt;code&gt;az cli&lt;/code&gt; to query multiple fields of VM information.
Here we need to use JMESPath language to implement it.&lt;/p&gt;
&lt;p&gt;Typically, we will use &lt;code&gt;az vm show&lt;/code&gt; to get the detailed VM
information:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ az vm show &lt;span class=&quot;token parameter variable&quot;&gt;-g&lt;/span&gt; Linux &lt;span class=&quot;token parameter variable&quot;&gt;-n&lt;/span&gt; alpha &lt;span class=&quot;token parameter variable&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-o&lt;/span&gt; table
Name    ResourceGroup    PowerState    PublicIps     Fqdns    Location    Zones
------  ---------------  ------------  ------------  -------  ----------  -------
alpha   Linux            VM running    &lt;span class=&quot;token number&quot;&gt;11.1&lt;/span&gt;.111.111           eastasia    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://finisky.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://finisky.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>基于LLM评估搜索系统</title>
    <link href="https://finisky.github.io/llm-can-accurately-predict-searcher-preferences/"/>
    <id>https://finisky.github.io/llm-can-accurately-predict-searcher-preferences/</id>
    <published>2024-08-29T00:30:26.000Z</published>
    <updated>2024-08-29T08:39:21.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;搜索系统的评估和调优很大程度上依赖于相关性标签——这些标签标注了某个文档对特定搜索和搜索者是否有用。理想情况下，这些标签来自真实的搜索用户，但要大规模收集这些数据非常困难，所以典型的实验依赖于第三方标注人员，但他们也可能产生不准确的标注。标注质量一般通过持续的审核、培训和监控来管理。&lt;/p&gt;
&lt;p&gt;微软（Bing搜索组）在SIGIR&#39;24提出了一种“反其道而行之”的方法：从真实的用户获取反馈，并利用这些反馈来选择一个与之相符的LLM及其提示词，然后令该LLM大规模地产生标签。实验表明，LLM的准确性与人工标注者相当，并且在找到最佳系统和最难的查询方面同样有用。&lt;/p&gt;
&lt;p&gt;[SIGIR2024] &lt;a
href=&quot;https://www.microsoft.com/en-us/research/publication/large-language-models-can-accurately-predict-searcher-preferences/&quot;&gt;#
Large Language Models can Accurately Predict Searcher
Preferences&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Machine Learning" scheme="https://finisky.github.io/categories/Machine-Learning/"/>
    
    
    <category term="Machine Learning" scheme="https://finisky.github.io/tags/Machine-Learning/"/>
    
    <category term="NLP" scheme="https://finisky.github.io/tags/NLP/"/>
    
    <category term="Language Model" scheme="https://finisky.github.io/tags/Language-Model/"/>
    
    <category term="Search" scheme="https://finisky.github.io/tags/Search/"/>
    
  </entry>
  
  <entry>
    <title>ChatGPT擅长搜索排序吗？</title>
    <link href="https://finisky.github.io/is-chatgpt-good-at-search-ranking/"/>
    <id>https://finisky.github.io/is-chatgpt-good-at-search-ranking/</id>
    <published>2024-07-21T14:15:25.000Z</published>
    <updated>2024-07-21T16:11:06.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;大语言模型在各种与语言相关的任务中表现出了显著的零样本泛化能力，包括搜索引擎。然而，现有的工作主要利用LLM的生成能力进行信息检索，而不是直接进行段落排序。这篇EMNLP2023的论文(Outstanding
Paper)研究了LLM是否擅长搜索排序的问题。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://aclanthology.org/2023.emnlp-main.923/&quot;&gt;# Is ChatGPT
Good at Search? Investigating Large Language Models as Re-Ranking
Agents&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Machine Learning" scheme="https://finisky.github.io/categories/Machine-Learning/"/>
    
    
    <category term="Machine Learning" scheme="https://finisky.github.io/tags/Machine-Learning/"/>
    
    <category term="NLP" scheme="https://finisky.github.io/tags/NLP/"/>
    
    <category term="Search" scheme="https://finisky.github.io/tags/Search/"/>
    
  </entry>
  
  <entry>
    <title>Rethinking the Role of Token Retrieval in Multi-Vector Retrieval简读</title>
    <link href="https://finisky.github.io/xtr-summary/"/>
    <id>https://finisky.github.io/xtr-summary/</id>
    <published>2024-06-30T10:58:25.000Z</published>
    <updated>2024-07-23T01:57:31.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;之前写过深度检索模型的介绍：&lt;a href=&quot;/retrievermodels/&quot;&gt;#
深度文本检索模型：DPR, PolyEncoders, DCBERT,
ColBERT&lt;/a&gt;，今天来看看DeepMind在NeurIPS
2024上的文章，对多向量检索模型（Multi-Vector
Retrieval）ColBERT进行了改进：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://arxiv.org/pdf/2304.01982&quot;&gt;Rethinking the Role of
Token Retrieval in Multi-Vector Retrieval&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;多向量检索模型由于使Query与Doc进行词元级别的交互，因此在许多信息检索基准测试中达到了SOTA。然而，其非线性评分函数无法扩展到数百万个文档，这就需要一个三阶段的推理过程：通过词元检索检索初始候选，访问所有词元向量，并对初始候选文档进行评分。非线性评分函数应用于每个候选文档的所有词元向量，使得推理过程复杂且缓慢。XTR
引入了新的目标函数，鼓励模型首先检索最重要的文档词元，对词元检索的改进使得
XTR
可以仅使用检索到的词元来对候选文档排序，而不是文档中的所有词元，因此其成本比
ColBERT 低两到三个数量级。在流行的 BEIR 基准测试中，XTR
在没有任何蒸馏的情况下，将 NDCG@10 提升了 2.8。&lt;/p&gt;
&lt;p&gt;主要改进点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仅使用检索到的doc token而非全部doc token进行相似度计算&lt;/li&gt;
&lt;li&gt;解决了检索训练和推理之间的gap&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Machine Learning" scheme="https://finisky.github.io/categories/Machine-Learning/"/>
    
    
    <category term="Machine Learning" scheme="https://finisky.github.io/tags/Machine-Learning/"/>
    
    <category term="NLP" scheme="https://finisky.github.io/tags/NLP/"/>
    
    <category term="Search" scheme="https://finisky.github.io/tags/Search/"/>
    
  </entry>
  
  <entry>
    <title>AI搜索与大模型应用的一些思考</title>
    <link href="https://finisky.github.io/thoughts-on-ai-search-and-llm-applications/"/>
    <id>https://finisky.github.io/thoughts-on-ai-search-and-llm-applications/</id>
    <published>2024-05-10T01:28:36.000Z</published>
    <updated>2024-07-23T01:57:31.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;最近读到一篇有趣的文章，讨论了当前许多新的AI搜索产品是否会取代Google：&lt;/p&gt;
&lt;p&gt;&lt;a
href=&quot;https://www.theverge.com/24111326/ai-search-perplexity-copilot-you-google-review&quot;&gt;Here’s
why AI search engines really can’t kill Google&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先简要地看下这篇文章在说什么：&lt;/p&gt;
&lt;p&gt;如果要取代Google，那么这些新的产品必须可以完成Google能做的所有事情。于是，作者先收集了Top100的Google搜索查询，然后将它们输入到当前最好的一些AI搜索产品中。作者认为，虽然在某些情况下，基于LLM的搜索比一页Google搜索结果有用，但在大多数情况下，AI搜索取代Google还是相当困难的。&lt;/p&gt;</summary>
    
    
    
    <category term="Machine Learning" scheme="https://finisky.github.io/categories/Machine-Learning/"/>
    
    
    <category term="Machine Learning" scheme="https://finisky.github.io/tags/Machine-Learning/"/>
    
    <category term="NLP" scheme="https://finisky.github.io/tags/NLP/"/>
    
    <category term="NLG" scheme="https://finisky.github.io/tags/NLG/"/>
    
    <category term="Language Model" scheme="https://finisky.github.io/tags/Language-Model/"/>
    
    <category term="Search" scheme="https://finisky.github.io/tags/Search/"/>
    
  </entry>
  
  <entry>
    <title>WinSCP Transfer to Temporary Filename Not Working</title>
    <link href="https://finisky.github.io/en/winscp-transfer-to-temp-filename-not-working/"/>
    <id>https://finisky.github.io/en/winscp-transfer-to-temp-filename-not-working/</id>
    <published>2024-05-08T01:10:23.000Z</published>
    <updated>2024-05-08T06:17:00.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;In WinSCP, I found that when uploading file to the server, the file
doesn&#39;t have a temporary filename extension &quot;.filepart&quot;.&lt;/p&gt;
&lt;p&gt;Enable temporary filename for all files in &quot;Preferences -&amp;gt;
Transfer -&amp;gt; Endurance&quot; still does not work.&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://finisky.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://finisky.github.io/tags/Linux/"/>
    
    <category term="Ubuntu" scheme="https://finisky.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu Server Freezes After Several Minutes</title>
    <link href="https://finisky.github.io/en/ubuntu-freezes-after-several-minutes/"/>
    <id>https://finisky.github.io/en/ubuntu-freezes-after-several-minutes/</id>
    <published>2024-04-18T04:36:16.000Z</published>
    <updated>2024-04-18T04:54:38.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;After upgrading Ubuntu 20.04 LTS to Ubuntu 22.04LTS, the server
always freezes after ~10 minutes. All services are down, cannot ssh,
connect to serial console but cannot input. However, this issue never
happen before release upgrade.&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://finisky.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://finisky.github.io/tags/Linux/"/>
    
    <category term="Ubuntu" scheme="https://finisky.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Word Wildcard Replace Bug When Track Changes</title>
    <link href="https://finisky.github.io/en/word-wildcard-replace-bug-when-track-changes/"/>
    <id>https://finisky.github.io/en/word-wildcard-replace-bug-when-track-changes/</id>
    <published>2024-04-03T01:18:43.000Z</published>
    <updated>2024-04-05T08:33:22.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;Cannot believe that Word has such a bug: when tracking changes,
wildcard replacement cannot correctly work.&lt;/p&gt;
&lt;p&gt;I want to batch replace English parentheses with Chinese parentheses,
so I use wildcard replacement:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;Find What: \((*)\)
Options: Use Wildcards
Replace With: （\1）&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For example, for &quot;(abc)&quot;, the expected result is &quot;（abc）&quot;, however,
the result is &quot;abc（）&quot;.&lt;/p&gt;</summary>
    
    
    
    <category term="Misc" scheme="https://finisky.github.io/categories/Misc/"/>
    
    
  </entry>
  
  <entry>
    <title>Word追踪修订时通配符替换Bug</title>
    <link href="https://finisky.github.io/word-wildcard-replace-bug-when-track-changes/"/>
    <id>https://finisky.github.io/word-wildcard-replace-bug-when-track-changes/</id>
    <published>2024-04-03T01:16:33.000Z</published>
    <updated>2024-04-05T08:33:22.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;没想到浓眉大眼的Office
Word居然还有这种Bug：在追踪修订时，通配符不能正确替换。&lt;/p&gt;
&lt;p&gt;在处理一个大型文档时，需要批量将英文括号替换成中文括号，因此需要使用到通配符替换：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;Find What: \((*)\)
Options: Use Wildcards
Replace With: （\1）&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;预期行为是：将“(abc)”替换为“（abc）”，却没料到被替换成了“abc（）”。&lt;/p&gt;</summary>
    
    
    
    <category term="Misc" scheme="https://finisky.github.io/categories/Misc/"/>
    
    
  </entry>
  
</feed>
